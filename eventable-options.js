// Generated by CoffeeScript 1.9.0
(function() {
  var AbstractError, CloseError, EVENT_DONE, EVENT_STOPPED, Errors, InvalidArgumentError, NotImplementedError, OpenError, ReadError, WriteError, consts, eventable, extend, filter, isArray, isFunction;

  Errors = require("./abstract-error");

  extend = require('util-ex/lib/_extend');

  isArray = require('util-ex/lib/is/type/array');

  isFunction = require('util-ex/lib/is/type/function');

  eventable = require('events-ex/eventable');

  consts = require('events-ex/consts');

  EVENT_DONE = consts.DONE;

  EVENT_STOPPED = consts.STOPPED;

  filter = eventable.filter;

  AbstractError = Errors.AbstractError;

  NotImplementedError = Errors.NotImplementedError;

  InvalidArgumentError = Errors.InvalidArgumentError;

  OpenError = Errors.OpenError;

  CloseError = Errors.CloseError;

  ReadError = Errors.ReadError;

  WriteError = Errors.WriteError;

  module.exports = function(aOptions) {
    var vExcludes, vIncludes;
    if (!aOptions) {
      aOptions = {};
    }
    if (!aOptions.methods) {
      aOptions.methods = {};
    }
    vIncludes = aOptions.include;
    if (vIncludes) {
      if (!isArray(vIncludes)) {
        vIncludes = [vIncludes];
      }
    } else {
      vIncludes = [];
    }
    vExcludes = aOptions.exclude;
    if (vExcludes) {
      if (!isArray(vExcludes)) {
        vExcludes = [vExcludes];
      }
    } else {
      vExcludes = [];
    }
    if (!filter('open', vIncludes, vExcludes)) {
      vExcludes.push('openAsync');
      vExcludes.push('openSync');
    }
    if (!filter('close', vIncludes, vExcludes)) {
      vExcludes.push('closeAsync');
      vExcludes.push('closeSync');
    }
    if (!filter('get', vIncludes, vExcludes)) {
      vExcludes.push('getAsync');
      vExcludes.push('getSync');
    }
    if (!filter('mGet', vIncludes, vExcludes)) {
      vExcludes.push('mGetAsync');
      vExcludes.push('mGetSync');
    }
    if (!filter('put', vIncludes, vExcludes)) {
      vExcludes.push('putAsync');
      vExcludes.push('putSync');
    }
    if (!filter('batch', vIncludes, vExcludes)) {
      vExcludes.push('batchAsync');
      vExcludes.push('batchSync');
    }
    extend(aOptions.methods, {
      openSync: function(options) {
        var inherited;
        inherited = this["super"];
        return (function(options) {
          var result;
          this.emit('opening', options);
          result = inherited.call(this, options);
          this.emit('ready', result);
          this.emit('open', result);
          if (result) {
            result = this;
          }
          return result;
        }).apply(this.self, arguments);
      },
      openAsync: function(options, callback) {
        var inherited;
        inherited = this["super"];
        return (function(options, callback) {
          this.emit('opening', options);
          return inherited.call(this, options, (function(_this) {
            return function(err, result) {
              if (err) {
                return _this.dispatchError(err, callback);
              }
              _this.emit('ready', result);
              _this.emit('open', result);
              return callback(err, result);
            };
          })(this));
        }).apply(this.self, arguments);
      },
      closeSync: function() {
        var inherited;
        inherited = this["super"];
        return (function() {
          var result;
          this.emit('closing');
          result = inherited.apply(this);
          this.emit('closed', result);
          this.emit('close', result);
          return result;
        }).apply(this.self);
      },
      closeAsync: function(callback) {
        var inherited;
        if (!isFunction(callback)) {
          callback = void 0;
        }
        inherited = this["super"];
        return (function() {
          this.emit('closing');
          return inherited.call(this, (function(_this) {
            return function(err, result) {
              if (err) {
                return _this.dispatchError(err, callback);
              }
              _this.emit('closed', result);
              _this.emit('close', result);
              if (callback) {
                return callback(null, result);
              }
            };
          })(this));
        }).apply(this.self);
      },
      getAsync: function(key, options, callback) {
        var inherited;
        inherited = this["super"];
        return (function(key, options, callback) {
          var err, result, vState;
          result = this.emit('getting', key, options);
          if (result && (vState = result.state)) {
            if (vState === EVENT_DONE) {
              return callback(null, result.result);
            } else if (vState === EVENT_STOPPED) {
              err = new ReadError('Get is halted by listener');
              return this.dispatchError(err, callback);
            }
          }
          return inherited.call(this, key, options, (function(_this) {
            return function(err, result) {
              if (err) {
                return _this.dispatchError(err, callback);
              }
              _this.emit('get', key, result, options);
              return callback(null, result);
            };
          })(this));
        }).apply(this.self, arguments);
      },
      getSync: function(key, options) {
        var inherited;
        inherited = this["super"];
        return (function(key, options) {
          var result, vState;
          result = this.emit('getting', key, options);
          if (result && (vState = result.state)) {
            if (vState === EVENT_DONE) {
              return result.result;
            } else if (vState === EVENT_STOPPED) {
              throw new ReadError('Get is halted by listener');
            }
          }
          result = inherited.apply(this, arguments);
          this.emit('get', key, result, options);
          return result;
        }).apply(this.self, arguments);
      },
      mGetAsync: function(key, options, callback) {
        var inherited;
        inherited = this["super"];
        return (function(key, options, callback) {
          var err, result, vState;
          result = this.emit('mGetting', key, options);
          if (result && (vState = result.state)) {
            if (vState === EVENT_DONE) {
              return callback(null, result.result);
            } else if (vState === EVENT_STOPPED) {
              err = new ReadError('mGet is halted by listener');
              return this.dispatchError(err, callback);
            }
          }
          return inherited.call(this, key, options, (function(_this) {
            return function(err, result) {
              if (err) {
                return _this.dispatchError(err, callback);
              }
              _this.emit('mGet', key, result, options);
              return callback(null, result);
            };
          })(this));
        }).apply(this.self, arguments);
      },
      mGetSync: function(key, options) {
        var inherited;
        inherited = this["super"];
        return (function(key, options) {
          var result, vState;
          result = this.emit('mGetting', key, options);
          if (result && (vState = result.state)) {
            if (vState === EVENT_DONE) {
              return result.result;
            } else if (vState === EVENT_STOPPED) {
              throw new ReadError('mGet is halted by listener');
            }
          }
          result = inherited.apply(this, arguments);
          this.emit('mGet', key, result, options);
          return result;
        }).apply(this.self, arguments);
      },
      putAsync: function(key, value, options, callback) {
        var inherited;
        inherited = this["super"];
        return (function(key, value, options, callback) {
          var err, result, vState;
          result = this.emit('putting', key, value, options);
          if (result && (vState = result.state)) {
            if (vState === EVENT_DONE) {
              return callback(null, result.result);
            } else if (vState === EVENT_STOPPED) {
              err = new ReadError('put is halted by listener');
              return this.dispatchError(err, callback);
            }
          }
          return inherited.call(this, key, value, options, (function(_this) {
            return function(err, result) {
              if (err) {
                return _this.dispatchError(err, callback);
              }
              _this.emit('put', key, value, result, options);
              return callback(null, result);
            };
          })(this));
        }).apply(this.self, arguments);
      },
      putSync: function(key, value, options) {
        var inherited;
        inherited = this["super"];
        return (function(key, value, options) {
          var result, vState;
          result = this.emit('putting', key, value, options);
          if (result && (vState = result.state)) {
            if (vState === EVENT_DONE) {
              return result.result;
            } else if (vState === EVENT_STOPPED) {
              throw new ReadError('put is halted by listener');
            }
          }
          result = inherited.apply(this, arguments);
          this.emit('put', key, value, result, options);
          return result;
        }).apply(this.self, arguments);
      },
      delAsync: function(key, options, callback) {
        var inherited;
        inherited = this["super"];
        return (function(key, options, callback) {
          var err, result, vState;
          result = this.emit('deleting', key, options);
          if (result && (vState = result.state)) {
            if (vState === EVENT_DONE) {
              return callback(null, result.result);
            } else if (vState === EVENT_STOPPED) {
              err = new ReadError('Get is halted by listener');
              return this.dispatchError(err, callback);
            }
          }
          return inherited.call(this, key, options, (function(_this) {
            return function(err, result) {
              if (err) {
                return _this.dispatchError(err, callback);
              }
              _this.emit('delete', key, result, options);
              return callback(null, result);
            };
          })(this));
        }).apply(this.self, arguments);
      },
      delSync: function(key, options) {
        var inherited;
        inherited = this["super"];
        return (function(key, options) {
          var result, vState;
          result = this.emit('deleting', key, options);
          if (result && (vState = result.state)) {
            if (vState === EVENT_DONE) {
              return result.result;
            } else if (vState === EVENT_STOPPED) {
              throw new ReadError('Get is halted by listener');
            }
          }
          result = inherited.apply(this, arguments);
          this.emit('delete', key, result, options);
          return result;
        }).apply(this.self, arguments);
      },
      batchAsync: function(operations, options, callback) {
        var inherited;
        inherited = this["super"];
        return (function(operations, options, callback) {
          var err, result, vState;
          result = this.emit('batching', operations, options);
          if (result && (vState = result.state)) {
            if (vState === EVENT_DONE) {
              return callback(null, result.result);
            } else if (vState === EVENT_STOPPED) {
              err = new ReadError('Get is halted by listener');
              return this.dispatchError(err, callback);
            }
          }
          return inherited.call(this, operations, options, (function(_this) {
            return function(err, result) {
              if (err) {
                return _this.dispatchError(err, callback);
              }
              _this.emit('batch', operations, result, options);
              return callback(null, result);
            };
          })(this));
        }).apply(this.self, arguments);
      },
      batchSync: function(operations, options) {
        var inherited;
        inherited = this["super"];
        return (function(operations, options) {
          var result, vState;
          result = this.emit('batching', operations, options);
          if (result && (vState = result.state)) {
            if (vState === EVENT_DONE) {
              return result.result;
            } else if (vState === EVENT_STOPPED) {
              throw new ReadError('Get is halted by listener');
            }
          }
          result = inherited.apply(this, arguments);
          this.emit('batch', operations, result, options);
          return result;
        }).apply(this.self, arguments);
      }
    });
    return aOptions;
  };

}).call(this);
